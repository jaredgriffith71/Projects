import os
import asyncio
from collections import deque
from telegram_bot import send_message_to_chat
from telegram_reader import read_telegram_messages
from api_interaction import fetch_wallet_balance

LAST_MESSAGE_ID_FILE = 'last_message_id.txt'
MAX_PAIRS_CACHE = 3  # Maximum number of token-wallet pairs to cache

api_keys = [
    'apikey1',
    'apikey2',
    'apikey3',
    '...'
]
api_key_index = 0
api_key = api_keys[api_key_index]

api_id = 'YOUR_API_ID'
api_hash = 'YOUR_API_HASH'
phone_number = 'YOUR_PHONE_NUMBER'
channel_name = 'DESIRED_TELEGRAM_CHANNEL'

def api_key_rotator():
    global api_key_index, api_key
    api_key_index = (api_key_index + 1) % len(api_keys)
    api_key = api_keys[api_key_index]
    print(f"API Key rotated to: {api_key}")

class TokenPairQueue:
    def __init__(self, max_size=MAX_PAIRS_CACHE):
        self.queue = deque(maxlen=max_size)

    def add_pair(self, pair):
        self.queue.append(pair)

    def contains(self, pair):
        return pair in self.queue

def get_last_message_id():
    if os.path.exists(LAST_MESSAGE_ID_FILE):
        with open(LAST_MESSAGE_ID_FILE, 'r') as file:
            return int(file.read().strip())
    return None

def set_last_message_id(message_id):
    with open(LAST_MESSAGE_ID_FILE, 'w') as file:
        file.write(str(message_id))

def check_creator_wallet_percentage(total_supply, creator_balance):
    try:
        percentage_held = (creator_balance / total_supply) * 100
        return 20 <= percentage_held <= 30
    except ZeroDivisionError:
        print("Total supply cannot be zero.")
        return False

async def process_message(message_id, token_name, token_address, wallet_address, total_supply, pair_queue, wallet_cache):
    print(f"\n---\nProcessing Token: {token_name}\nToken Address: {token_address}\nWallet: {wallet_address}\nTotal Supply: {total_supply}")

    if pair_queue.contains((wallet_address, token_address)):
        print(f"Skipping already processed message ID: {message_id}")
        return

    # Introduce a delay before making the API call
    await asyncio.sleep(1)

    cache_key = (wallet_address, token_address)
    try:
        creator_balance = fetch_wallet_balance(wallet_address, token_address, api_key)
        if creator_balance is not None:
            wallet_cache[cache_key] = creator_balance
            print(f"Token Balance: {creator_balance}")
        else:
            print(f"Failed to fetch balance for wallet {wallet_address}")
            return
    except Exception as e:
        print(f"Error fetching balance: {e}")
        if '429' in str(e):
            api_key_rotator()
            creator_balance = fetch_wallet_balance(wallet_address, token_address, api_key)  # Retry with new key
            if creator_balance is not None:
                wallet_cache[cache_key] = creator_balance
                print(f"Token Balance after rotation: {creator_balance}")
            else:
                print(f"Failed to fetch balance for wallet {wallet_address} after API key rotation")
                return
        else:
            return

    if check_creator_wallet_percentage(float(total_supply), creator_balance):
        message_text = (
            f"ALERT: Wallet holds 20-30% of supply.\n\n"
            f"Ticker: {token_name}\n\n"
            f"<a href='https://solscan.io/account/{wallet_address}'>DEP: </a>"
            f"<code>{wallet_address}</code>\n\n"
            f"CA: <code>{token_address}</code>\n\n"
            f"Token Balance: <b>{creator_balance}</b>\n\n"
            f"<a href='https://bullx.io/terminal?chainId=1399811149&address={token_address}'>Bullx</a>"
            f" Â¬ "
            f"<a href='https://photon-sol.tinyastro.io/en/lp/{token_address}'>Photon</a>"
        )
        print(f"\n---\n{message_text}\n---")
        await send_message_to_chat(message_text)

    else:
        print("Creator's wallet does not hold between 20% and 30% of the total supply.")

    # Add the pair to the recently processed queue
    pair_queue.add_pair((wallet_address, token_address))

async def main():
    last_message_id = get_last_message_id()
    wallet_cache = {}
    pair_queue = TokenPairQueue(MAX_PAIRS_CACHE)

    if last_message_id is None:
        async for message_id, *_ in read_telegram_messages(api_id, api_hash, phone_number, channel_name, None):
            last_message_id = message_id
            set_last_message_id(last_message_id)
            break

    while True:
        async for message_id, token_address, wallet_address, total_supply, token_name in read_telegram_messages(api_id, api_hash, phone_number, channel_name, last_message_id):
            if message_id <= last_message_id:
                continue

            set_last_message_id(message_id)

            # Process each message and manage the queue
            await process_message(message_id, token_name, token_address, wallet_address, total_supply, pair_queue, wallet_cache)
            await asyncio.sleep(1)  # Staggering the processing with a delay of 2 seconds

            # Ensure only the first scan outputs results
            if len(pair_queue.queue) == MAX_PAIRS_CACHE:
                print(f"Queue full. Message {pair_queue.queue[0]} will be removed on the next incoming message.")

        print("Waiting for new messages...")
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main())
