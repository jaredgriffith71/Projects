import os
import time
from telegram_reader import read_telegram_messages
from api_interaction import fetch_token_supply, fetch_wallet_balance

LAST_MESSAGE_ID_FILE = 'last_message_id.txt'

def get_last_message_id():
    if os.path.exists(LAST_MESSAGE_ID_FILE):
        with open(LAST_MESSAGE_ID_FILE, 'r') as file:
            return int(file.read().strip())
    return None

def set_last_message_id(message_id):
    with open(LAST_MESSAGE_ID_FILE, 'w') as file:
        file.write(str(message_id))

def check_creator_wallet_percentage(total_supply, creator_balance):
    percentage_held = (creator_balance / total_supply) * 100
    return percentage_held >= 20 and percentage_held <= 30

api_key = 'ea3d89e8-07f4-4e7e-93f4-2e69b77e1f25'  # Helius API key
api_id = '24855421'  # Telegram API ID
api_hash = '6a5d75ba93e747bf2411533f00237db6'  # Telegram API hash
phone_number = '+19419610694'
channel_name = 'SolanaNewPumpfun'

def main():
    last_message_id = get_last_message_id()
    token_cache = {}  # Cache for token supplies
    wallet_cache = {}  # Cache for wallet balances

    for message_id, token_address, wallet_address in read_telegram_messages(api_id, api_hash, phone_number, channel_name, last_message_id):
        print(f"Processing token address: {token_address}, wallet address: {wallet_address}")
        
        set_last_message_id(message_id)

        if token_address not in token_cache:
            try:
                total_supply = fetch_token_supply(token_address, api_key)
                print(f"Fetched total supply: {total_supply}")
                if total_supply is not None:
                    token_cache[token_address] = total_supply
                else:
                    print(f"Failed to fetch supply for token {token_address}")
                    continue
            except Exception as e:
                print(f"An error occurred while fetching supply for {token_address}: {e}")
                continue

        try:
            cache_key = (wallet_address, token_address)
            if cache_key not in wallet_cache:
                creator_balance = fetch_wallet_balance(wallet_address, token_address, api_key)
                print(f"Fetched creator balance: {creator_balance}")
                if creator_balance is not None:
                    wallet_cache[cache_key] = creator_balance
                else:
                    print(f"Failed to fetch balance for wallet {wallet_address}")
                    continue
            else:
                creator_balance = wallet_cache[cache_key]
                
            total_supply = token_cache[token_address]
            if check_creator_wallet_percentage(total_supply, creator_balance):
                print(f"Creator's wallet for token {token_address} holds between 20% and 30% of the total supply.")
            else:
                print(f"Creator's wallet for token {token_address} does not hold between 20% and 30% of the total supply.")
        except Exception as e:
            print(f"An error occurred while fetching balance for wallet {wallet_address}: {e}")

        time.sleep(1)

if __name__ == "__main__":
    main()
